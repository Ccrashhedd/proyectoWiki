---
// Header Component
---

<header class="header">
	<div class="header-container">
		<div class="header-left">
			<button class="menu-toggle" aria-label="Toggle menu">
				<svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
					<line x1="3" y1="12" x2="21" y2="12"></line>
					<line x1="3" y1="6" x2="21" y2="6"></line>
					<line x1="3" y1="18" x2="21" y2="18"></line>
				</svg>
			</button>
			<div class="logo">
				<svg width="32" height="32" viewBox="0 0 32 32" fill="none">
					<rect width="32" height="32" rx="8" fill="url(#gradient)"/>
					<path d="M16 8L20 12H12L16 8Z" fill="white"/>
					<rect x="12" y="14" width="8" height="10" rx="1" fill="white"/>
					<defs>
						<linearGradient id="gradient" x1="0" y1="0" x2="32" y2="32">
							<stop offset="0%" stop-color="#4F46E5"/>
							<stop offset="100%" stop-color="#06B6D4"/>
						</linearGradient>
					</defs>
				</svg>
				<span class="logo-text">WikiDocs</span>
			</div>
		</div>

		<div class="header-center">
			<div class="search-container">
				<svg class="search-icon" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
					<circle cx="11" cy="11" r="8"></circle>
					<path d="m21 21-4.35-4.35"></path>
				</svg>
				<input type="search" placeholder="Buscar en la documentación..." class="search-input" id="search-trigger" readonly />
				<kbd class="search-kbd">Ctrl K</kbd>
			</div>
		</div>

		<!-- Search Modal -->
		<div class="search-modal" id="search-modal">
			<div class="search-modal-backdrop"></div>
			<div class="search-modal-content">
				<div class="search-modal-header">
					<svg class="search-icon" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
						<circle cx="11" cy="11" r="8"></circle>
						<path d="m21 21-4.35-4.35"></path>
					</svg>
					<input 
						type="search" 
						placeholder="Buscar en la documentación..." 
						class="search-modal-input" 
						id="search-input"
						autocomplete="off"
					/>
					<button class="search-modal-close" id="search-close" aria-label="Cerrar búsqueda">
						<svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
							<line x1="18" y1="6" x2="6" y2="18"></line>
							<line x1="6" y1="6" x2="18" y2="18"></line>
						</svg>
					</button>
				</div>
				<div class="search-results" id="search-results">
					<div class="search-empty">
						<svg width="48" height="48" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
							<circle cx="11" cy="11" r="8"></circle>
							<path d="m21 21-4.35-4.35"></path>
						</svg>
						<p>Comienza a escribir para buscar...</p>
					</div>
				</div>
				<div class="search-footer">
					<div class="search-commands">
						<span><kbd>↑</kbd><kbd>↓</kbd> Navegar</span>
						<span><kbd>Enter</kbd> Seleccionar</span>
						<span><kbd>Esc</kbd> Cerrar</span>
					</div>
				</div>
			</div>
		</div>

		<div class="header-right">
			<button class="theme-toggle" id="theme-toggle" aria-label="Cambiar tema">
				<!-- Icono de Sol (modo claro) -->
				<svg class="theme-icon sun-icon" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
					<circle cx="12" cy="12" r="5"></circle>
					<line x1="12" y1="1" x2="12" y2="3"></line>
					<line x1="12" y1="21" x2="12" y2="23"></line>
					<line x1="4.22" y1="4.22" x2="5.64" y2="5.64"></line>
					<line x1="18.36" y1="18.36" x2="19.78" y2="19.78"></line>
					<line x1="1" y1="12" x2="3" y2="12"></line>
					<line x1="21" y1="12" x2="23" y2="12"></line>
					<line x1="4.22" y1="19.78" x2="5.64" y2="18.36"></line>
					<line x1="18.36" y1="5.64" x2="19.78" y2="4.22"></line>
				</svg>
				<!-- Icono de Luna (modo oscuro) -->
				<svg class="theme-icon moon-icon" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
					<path d="M21 12.79A9 9 0 1 1 11.21 3 7 7 0 0 0 21 12.79z"></path>
				</svg>
			</button>
		</div>
	</div>
</header>

<style>
	.header {
		position: fixed;
		top: 0;
		left: 0;
		right: 0;
		height: var(--header-height);
		background: var(--color-bg);
		border-bottom: 1px solid var(--color-border);
		z-index: 100;
		backdrop-filter: blur(8px);
		-webkit-backdrop-filter: blur(8px);
		transition: background-color 0.3s ease, border-color 0.3s ease;
	}

	[data-theme="light"] .header {
		background: rgba(255, 255, 255, 0.95);
	}

	[data-theme="dark"] .header {
		background: rgba(15, 23, 42, 0.95);
	}

	.header-container {
		height: 100%;
		max-width: 100%;
		margin: 0 auto;
		padding: 0 1.5rem;
		display: flex;
		align-items: center;
		justify-content: space-between;
		gap: 2rem;
	}

	.header-left {
		display: flex;
		align-items: center;
		gap: 1rem;
	}

	.menu-toggle {
		display: none;
		background: none;
		border: none;
		color: var(--color-text);
		cursor: pointer;
		padding: 0.5rem;
		border-radius: 0.5rem;
		transition: background 0.2s;
	}

	.menu-toggle:hover {
		background: var(--color-bg-tertiary);
	}

	.logo {
		display: flex;
		align-items: center;
		gap: 0.75rem;
		font-weight: 600;
		font-size: 1.125rem;
		color: var(--color-text);
	}

	.logo-text {
		white-space: nowrap;
	}

	.header-center {
		flex: 1;
		max-width: 600px;
	}

	.search-container {
		position: relative;
		width: 100%;
	}

	.search-icon {
		position: absolute;
		left: 1rem;
		top: 50%;
		transform: translateY(-50%);
		color: var(--color-text-secondary);
		pointer-events: none;
	}

	.search-input {
		width: 100%;
		padding: 0.625rem 5rem 0.625rem 2.75rem;
		border: 1px solid var(--color-border);
		border-radius: 0.5rem;
		font-size: 0.875rem;
		background: var(--color-bg-secondary);
		color: var(--color-text);
		transition: all 0.2s;
		cursor: pointer;
	}

	.search-input:focus {
		outline: none;
		border-color: var(--color-primary);
		background: var(--color-bg);
		box-shadow: 0 0 0 3px rgba(79, 70, 229, 0.1);
		cursor: text;
	}

	.search-kbd {
		position: absolute;
		right: 1rem;
		top: 50%;
		transform: translateY(-50%);
		padding: 0.25rem 0.5rem;
		background: var(--color-bg);
		border: 1px solid var(--color-border);
		border-radius: 0.25rem;
		font-size: 0.75rem;
		color: var(--color-text-secondary);
		font-family: monospace;
	}

	.header-right {
		display: flex;
		align-items: center;
		gap: 1.5rem;
	}

	.nav-links {
		display: flex;
		gap: 1.5rem;
		align-items: center;
	}

	.nav-link {
		font-size: 0.875rem;
		font-weight: 500;
		color: var(--color-text-secondary);
		transition: color 0.2s;
	}

	.nav-link:hover {
		color: var(--color-text);
	}

	.theme-toggle,
	.github-link {
		display: flex;
		align-items: center;
		justify-content: center;
		padding: 0.5rem;
		background: none;
		border: none;
		color: var(--color-text-secondary);
		cursor: pointer;
		border-radius: 0.5rem;
		transition: all 0.2s;
		position: relative;
	}

	.theme-toggle:hover,
	.github-link:hover {
		background: var(--color-bg-tertiary);
		color: var(--color-text);
	}

	/* Iconos de tema */
	.theme-icon {
		position: absolute;
		transition: all 0.3s ease;
	}

	.sun-icon {
		opacity: 1;
		transform: rotate(0deg) scale(1);
	}

	.moon-icon {
		opacity: 0;
		transform: rotate(90deg) scale(0);
	}

	/* Cuando está en modo oscuro */
	[data-theme="dark"] .sun-icon {
		opacity: 0;
		transform: rotate(-90deg) scale(0);
	}

	[data-theme="dark"] .moon-icon {
		opacity: 1;
		transform: rotate(0deg) scale(1);
	}

	@media (max-width: 1024px) {
		.nav-links {
			display: none;
		}
	}

	@media (max-width: 1024px) {
		.header-container {
			padding: 0 1rem;
			gap: 1rem;
		}

		.header-center {
			max-width: 400px;
		}

		.search-kbd {
			display: none;
		}
	}

	@media (max-width: 768px) {
		.menu-toggle {
			display: flex;
		}

		.header-container {
			gap: 0.5rem;
		}

		.header-center {
			display: none;
		}

		.logo-text {
			display: none;
		}

		.search-modal-content {
			margin: 0 0.5rem;
			max-height: 80vh;
		}

		.search-modal-header {
			padding: 0.75rem 1rem;
		}

		.search-commands {
			display: none;
		}
	}

	@media (max-width: 480px) {
		.header-container {
			padding: 0 0.75rem;
		}

		.theme-toggle,
		.github-link {
			padding: 0.375rem;
		}
	}

	/* Search Modal */
	.search-modal {
		display: none;
		position: fixed;
		top: 0;
		left: 0;
		right: 0;
		bottom: 0;
		z-index: 9999;
		align-items: flex-start;
		justify-content: center;
		padding: 10vh 1rem 1rem;
	}

	.search-modal.active {
		display: flex;
		animation: fadeIn 0.2s ease-out;
	}

	@keyframes fadeIn {
		from {
			opacity: 0;
		}
		to {
			opacity: 1;
		}
	}

	.search-modal-backdrop {
		position: fixed;
		top: 0;
		left: 0;
		right: 0;
		bottom: 0;
		background: rgba(0, 0, 0, 0.6);
		backdrop-filter: blur(8px);
		-webkit-backdrop-filter: blur(8px);
		z-index: -1;
	}

	.search-modal-content {
		position: relative;
		width: 100%;
		max-width: 640px;
		background: var(--color-bg);
		border-radius: 0.875rem;
		box-shadow: 
			0 20px 25px -5px rgba(0, 0, 0, 0.2), 
			0 10px 10px -5px rgba(0, 0, 0, 0.1),
			0 0 0 1px rgba(0, 0, 0, 0.05);
		border: 1px solid var(--color-border);
		display: flex;
		flex-direction: column;
		max-height: 70vh;
		z-index: 1;
		animation: slideIn 0.2s ease-out;
	}

	@keyframes slideIn {
		from {
			opacity: 0;
			transform: translateY(-20px) scale(0.95);
		}
		to {
			opacity: 1;
			transform: translateY(0) scale(1);
		}
	}

	.search-modal-header {
		display: flex;
		align-items: center;
		gap: 1rem;
		padding: 1rem 1.5rem;
		border-bottom: 1px solid var(--color-border);
	}

	.search-modal-header .search-icon {
		flex-shrink: 0;
		position: static;
		transform: none;
	}

	.search-modal-input {
		flex: 1;
		border: none;
		background: none;
		font-size: 1rem;
		color: var(--color-text);
		outline: none;
	}

	.search-modal-input::placeholder {
		color: var(--color-text-secondary);
	}

	.search-modal-close {
		display: flex;
		align-items: center;
		justify-content: center;
		padding: 0.5rem;
		background: none;
		border: none;
		color: var(--color-text-secondary);
		cursor: pointer;
		border-radius: 0.375rem;
		transition: all 0.2s;
	}

	.search-modal-close:hover {
		background: var(--color-bg-tertiary);
		color: var(--color-text);
	}

	.search-results {
		flex: 1;
		overflow-y: auto;
		padding: 0.5rem;
		min-height: 200px;
	}

	.search-results::-webkit-scrollbar {
		width: 8px;
	}

	.search-results::-webkit-scrollbar-track {
		background: transparent;
	}

	.search-results::-webkit-scrollbar-thumb {
		background: var(--color-border);
		border-radius: 4px;
	}

	.search-results::-webkit-scrollbar-thumb:hover {
		background: var(--color-border-hover);
	}

	.search-empty {
		display: flex;
		flex-direction: column;
		align-items: center;
		justify-content: center;
		padding: 3rem 1rem;
		color: var(--color-text-secondary);
		text-align: center;
		gap: 0.5rem;
	}

	.search-empty svg {
		opacity: 0.5;
		flex-shrink: 0;
	}

	.search-empty p {
		margin: 0;
	}

	.search-result-item {
		display: flex;
		align-items: flex-start;
		gap: 1rem;
		padding: 0.75rem 1rem;
		border-radius: 0.5rem;
		cursor: pointer;
		transition: background 0.2s;
		text-decoration: none;
		color: var(--color-text);
	}

	.search-result-item:hover,
	.search-result-item.selected {
		background: var(--color-bg-secondary);
	}

	.search-result-icon {
		flex-shrink: 0;
		width: 20px;
		height: 20px;
		color: var(--color-primary);
		margin-top: 0.25rem;
	}

	.search-result-content {
		flex: 1;
		min-width: 0;
	}

	.search-result-title {
		font-weight: 500;
		margin-bottom: 0.25rem;
		color: var(--color-text);
	}

	.search-result-description {
		font-size: 0.875rem;
		color: var(--color-text-secondary);
		overflow: hidden;
		text-overflow: ellipsis;
		display: -webkit-box;
		-webkit-line-clamp: 2;
		-webkit-box-orient: vertical;
	}

	.search-result-highlight {
		background: rgba(79, 70, 229, 0.2);
		color: var(--color-primary);
		padding: 0.125rem 0.25rem;
		border-radius: 0.25rem;
	}

	.search-footer {
		padding: 0.75rem 1.5rem;
		border-top: 1px solid var(--color-border);
		background: var(--color-bg-secondary);
	}

	.search-commands {
		display: flex;
		gap: 1.5rem;
		font-size: 0.75rem;
		color: var(--color-text-secondary);
	}

	.search-commands kbd {
		padding: 0.125rem 0.375rem;
		background: var(--color-bg);
		border: 1px solid var(--color-border);
		border-radius: 0.25rem;
		font-family: monospace;
		margin: 0 0.25rem;
	}

	.search-no-results {
		padding: 2rem 1rem;
		text-align: center;
		color: var(--color-text-secondary);
	}
</style>

<script>
	// Datos de búsqueda - secciones de la wiki
	const searchData = [
		{
			id: 'niveles-prueba',
			title: 'Niveles de Prueba',
			description: 'Aprende sobre los diferentes niveles de prueba en el desarrollo de software',
			keywords: ['niveles', 'prueba', 'testing', 'unitarias', 'integración', 'sistema']
		},
		{
			id: 'pruebas-integracion',
			title: 'Pruebas de Integración',
			description: 'Verifica la interacción entre diferentes componentes del sistema',
			keywords: ['integración', 'componentes', 'big bang', 'incremental']
		},
		{
			id: 'tipos-pruebas',
			title: 'Tipos de Pruebas',
			description: 'Conoce los diferentes tipos de pruebas funcionales y no funcionales',
			keywords: ['tipos', 'funcionales', 'no funcionales']
		},
		{
			id: 'pruebas-cambio',
			title: 'Pruebas Relacionadas con el Cambio',
			description: 'Pruebas de regresión y confirmación para cambios en el código',
			keywords: ['cambio', 'regresión', 'confirmación', 'modificaciones']
		},
		{
			id: 'pruebas-no-funcionales',
			title: 'Pruebas No Funcionales',
			description: 'Evaluación de rendimiento, seguridad, usabilidad y más',
			keywords: ['no funcionales', 'rendimiento', 'seguridad', 'usabilidad']
		},
		{
			id: 'pruebas-rendimiento',
			title: 'Pruebas de Rendimiento',
			description: 'Pruebas de carga, estrés y escalabilidad del sistema',
			keywords: ['rendimiento', 'carga', 'estrés', 'escalabilidad', 'performance']
		},
		{
			id: 'pruebas-usabilidad',
			title: 'Pruebas de Usabilidad',
			description: 'Evaluación de la experiencia del usuario y facilidad de uso',
			keywords: ['usabilidad', 'ux', 'usuario', 'experiencia', 'interfaz']
		}
	];

	let selectedIndex = -1;

	// Elementos del DOM
	const searchTrigger = document.getElementById('search-trigger');
	const searchModal = document.getElementById('search-modal');
	const searchInput = document.getElementById('search-input') as HTMLInputElement;
	const searchResults = document.getElementById('search-results');
	const searchClose = document.getElementById('search-close');
	const backdrop = searchModal?.querySelector('.search-modal-backdrop');

	// Abrir modal
	function openSearch() {
		searchModal?.classList.add('active');
		searchInput?.focus();
		selectedIndex = -1;
	}

	// Cerrar modal
	function closeSearch() {
		searchModal?.classList.remove('active');
		if (searchInput) searchInput.value = '';
		if (searchResults) {
			searchResults.innerHTML = `
				<div class="search-empty">
					<svg width="48" height="48" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
						<circle cx="11" cy="11" r="8"></circle>
						<path d="m21 21-4.35-4.35"></path>
					</svg>
					<p>Comienza a escribir para buscar...</p>
				</div>
			`;
		}
		selectedIndex = -1;
	}

	// Función de búsqueda mejorada con coincidencias parciales
	function performSearch(query: string) {
		if (!query.trim()) {
			if (searchResults) {
				searchResults.innerHTML = `
					<div class="search-empty">
						<svg width="48" height="48" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
							<circle cx="11" cy="11" r="8"></circle>
							<path d="m21 21-4.35-4.35"></path>
						</svg>
						<p>Comienza a escribir para buscar...</p>
					</div>
				`;
			}
			return;
		}

		const lowerQuery = query.toLowerCase();
		
		// Función para calcular relevancia (score)
		function calculateScore(item: typeof searchData[0], query: string): number {
			let score = 0;
			const titleLower = item.title.toLowerCase();
			const descLower = item.description.toLowerCase();
			
			// Coincidencia exacta en título (máxima prioridad)
			if (titleLower === query) score += 100;
			
			// Título comienza con la búsqueda (alta prioridad)
			if (titleLower.startsWith(query)) score += 50;
			
			// Contiene la búsqueda en el título
			if (titleLower.includes(query)) score += 30;
			
			// Palabras del título comienzan con la búsqueda
			const titleWords = titleLower.split(' ');
			titleWords.forEach(word => {
				if (word.startsWith(query)) score += 20;
			});
			
			// Contiene en descripción
			if (descLower.includes(query)) score += 10;
			
			// Coincidencia en keywords
			item.keywords.forEach(keyword => {
				const keywordLower = keyword.toLowerCase();
				if (keywordLower === query) score += 15;
				if (keywordLower.startsWith(query)) score += 12;
				if (keywordLower.includes(query)) score += 8;
			});
			
			return score;
		}
		
		// Filtrar y ordenar por relevancia
		const results = searchData
			.map(item => ({
				...item,
				score: calculateScore(item, lowerQuery)
			}))
			.filter(item => item.score > 0)
			.sort((a, b) => b.score - a.score);

		if (results.length === 0) {
			if (searchResults) {
				searchResults.innerHTML = `
					<div class="search-no-results">
						<p>No se encontraron resultados para "<strong>${query}</strong>"</p>
					</div>
				`;
			}
			return;
		}

		const resultsHTML = results.map((result, index) => {
			const highlightedTitle = result.title.replace(
				new RegExp(`(${query})`, 'gi'),
				'<span class="search-result-highlight">$1</span>'
			);
			
			return `
				<a href="#${result.id}" class="search-result-item" data-index="${index}">
					<svg class="search-result-icon" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
						<path d="M14 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V8z"></path>
						<polyline points="14 2 14 8 20 8"></polyline>
					</svg>
					<div class="search-result-content">
						<div class="search-result-title">${highlightedTitle}</div>
						<div class="search-result-description">${result.description}</div>
					</div>
				</a>
			`;
		}).join('');

		if (searchResults) {
			searchResults.innerHTML = resultsHTML;
		}

		// Agregar eventos de clic
		document.querySelectorAll('.search-result-item').forEach(item => {
			item.addEventListener('click', (e) => {
				e.preventDefault();
				const href = (e.currentTarget as HTMLAnchorElement).getAttribute('href');
				if (href) {
					closeSearch();
					const target = document.querySelector(href);
					if (target) {
						target.scrollIntoView({ behavior: 'smooth', block: 'start' });
					}
				}
			});
		});

		selectedIndex = -1;
	}

	// Navegación con teclado
	function updateSelection() {
		const items = document.querySelectorAll('.search-result-item');
		items.forEach((item, index) => {
			if (index === selectedIndex) {
				item.classList.add('selected');
				item.scrollIntoView({ block: 'nearest', behavior: 'smooth' });
			} else {
				item.classList.remove('selected');
			}
		});
	}

	// Event Listeners
	searchTrigger?.addEventListener('click', openSearch);
	searchClose?.addEventListener('click', closeSearch);
	backdrop?.addEventListener('click', closeSearch);

	// Atajo de teclado Ctrl+K
	document.addEventListener('keydown', (e: KeyboardEvent) => {
		if ((e.ctrlKey || e.metaKey) && e.key === 'k') {
			e.preventDefault();
			openSearch();
		}

		if (e.key === 'Escape' && searchModal?.classList.contains('active')) {
			closeSearch();
		}

		// Navegación con flechas
		if (searchModal?.classList.contains('active')) {
			const items = document.querySelectorAll('.search-result-item');
			
			if (e.key === 'ArrowDown') {
				e.preventDefault();
				selectedIndex = Math.min(selectedIndex + 1, items.length - 1);
				updateSelection();
			} else if (e.key === 'ArrowUp') {
				e.preventDefault();
				selectedIndex = Math.max(selectedIndex - 1, -1);
				updateSelection();
			} else if (e.key === 'Enter' && selectedIndex >= 0) {
				e.preventDefault();
				const selectedItem = items[selectedIndex] as HTMLAnchorElement;
				if (selectedItem) {
					selectedItem.click();
				}
			}
		}
	});

	// Búsqueda en tiempo real
	searchInput?.addEventListener('input', (e) => {
		const query = (e.target as HTMLInputElement).value;
		performSearch(query);
	});

	// ============================================
	// FUNCIONALIDAD DE CAMBIO DE TEMA
	// ============================================
	
	const themeToggle = document.getElementById('theme-toggle');

	// Función para cambiar el tema
	function toggleTheme() {
		const currentTheme = document.documentElement.getAttribute('data-theme');
		const newTheme = currentTheme === 'dark' ? 'light' : 'dark';
		
		document.documentElement.setAttribute('data-theme', newTheme);
		localStorage.setItem('theme', newTheme);
	}

	// Event listener para el botón de tema
	themeToggle?.addEventListener('click', toggleTheme);

	// ============================================
	// MENÚ MÓVIL
	// ============================================
	
	const menuToggle = document.querySelector('.menu-toggle');
	const sidebar = document.querySelector('.sidebar');

	menuToggle?.addEventListener('click', () => {
		sidebar?.classList.toggle('open');
		document.body.style.overflow = sidebar?.classList.contains('open') ? 'hidden' : '';
	});

	// Cerrar sidebar al hacer clic en un enlace (móvil)
	document.querySelectorAll('.sidebar .nav-item').forEach(link => {
		link.addEventListener('click', () => {
			if (window.innerWidth <= 1024) {
				sidebar?.classList.remove('open');
				document.body.style.overflow = '';
			}
		});
	});

	// Cerrar sidebar al hacer clic fuera (móvil)
	document.addEventListener('click', (e) => {
		const target = e.target as HTMLElement;
		if (window.innerWidth <= 1024 && 
			sidebar?.classList.contains('open') &&
			!sidebar.contains(target) &&
			!menuToggle?.contains(target)) {
			sidebar.classList.remove('open');
			document.body.style.overflow = '';
		}
	});
</script>
